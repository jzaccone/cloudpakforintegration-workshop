{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Enterprise-grade integration with Cloud Pak for Integration \u00b6 Welcome to our workshop! In this workshop we'll be looking at various parts of the Cloud Pak for Integration platform. The goals of this workshop are: Create, deploy and test a new API using the API Connect Developer Toolkit Using App Connect to bidirectionally sync Salesforce data with an application Using Apache Kafka for near realtime data replication About this workshop \u00b6 The introductory page of the workshop is broken down into the following sections: About Cloud Pak for Integration Credits About Cloud Pak for Integration \u00b6 IBM Cloud Pak for Integration is an enterprise-ready, containerized software solution that contains all the tools you need to integrate and connect application components and data both within and between clouds. Running on Red Hat OpenShift, the IBM Cloud Pak for Integration gives businesses complete choice and agility to deploy workloads on premises and on private and public cloud. Cloud Pak for Integration includes components to enable you to manage: API lifecycle Create, secure, manage, share and monetize APIs across clouds while you maintain continuous availability. Take control of your API ecosystem and drive digital business with a robust API strategy that can meet the changing needs of your users Application and data integration Integrate all of your business data and applications more quickly and easily across any cloud, from the simplest SaaS application to the most complex systems - without worrying about mismatched sources, formats or standards Enterprise messaging Simplify, accelerate and facilitate the reliable exchange of data with a flexible and security-rich messaging solution that\u2019s trusted by some of the world\u2019s most successful enterprises. Ensure you receive the information you need, when you need it - and receive it only once Event streaming Use Apache Kafka to deliver messages more easily and reliably and to react to events in real time. Provide more personalized customer experiences by responding to events before the moment passes High-speed data transfer Send large files and data sets virtually anywhere, reliably and at maximum speed. Accelerate collaboration and meet the demands of complex global teams, without compromising performance or security Secure gateway Create persistent, security-rich connections between your on-premises and cloud environments. Quickly set up and manage gateways, control access on a per-resource basis, configure TLS encryption and mutual authentication, and monitor all of your traffic Lectures \u00b6 In addition to the labs, this workshop uses the following lectures: Cloud Pak for Integration Overview Introduction to App Connect Introduction to API Connect Application Messaging with MQ and Apache Kafka Credits \u00b6 This workshop was primarily written by David Carew , Henry Nash and Steve Martinelli .","title":"About the workshop"},{"location":"#enterprise-grade-integration-with-cloud-pak-for-integration","text":"Welcome to our workshop! In this workshop we'll be looking at various parts of the Cloud Pak for Integration platform. The goals of this workshop are: Create, deploy and test a new API using the API Connect Developer Toolkit Using App Connect to bidirectionally sync Salesforce data with an application Using Apache Kafka for near realtime data replication","title":"Enterprise-grade integration with Cloud Pak for Integration"},{"location":"#about-this-workshop","text":"The introductory page of the workshop is broken down into the following sections: About Cloud Pak for Integration Credits","title":"About this workshop"},{"location":"#about-cloud-pak-for-integration","text":"IBM Cloud Pak for Integration is an enterprise-ready, containerized software solution that contains all the tools you need to integrate and connect application components and data both within and between clouds. Running on Red Hat OpenShift, the IBM Cloud Pak for Integration gives businesses complete choice and agility to deploy workloads on premises and on private and public cloud. Cloud Pak for Integration includes components to enable you to manage: API lifecycle Create, secure, manage, share and monetize APIs across clouds while you maintain continuous availability. Take control of your API ecosystem and drive digital business with a robust API strategy that can meet the changing needs of your users Application and data integration Integrate all of your business data and applications more quickly and easily across any cloud, from the simplest SaaS application to the most complex systems - without worrying about mismatched sources, formats or standards Enterprise messaging Simplify, accelerate and facilitate the reliable exchange of data with a flexible and security-rich messaging solution that\u2019s trusted by some of the world\u2019s most successful enterprises. Ensure you receive the information you need, when you need it - and receive it only once Event streaming Use Apache Kafka to deliver messages more easily and reliably and to react to events in real time. Provide more personalized customer experiences by responding to events before the moment passes High-speed data transfer Send large files and data sets virtually anywhere, reliably and at maximum speed. Accelerate collaboration and meet the demands of complex global teams, without compromising performance or security Secure gateway Create persistent, security-rich connections between your on-premises and cloud environments. Quickly set up and manage gateways, control access on a per-resource basis, configure TLS encryption and mutual authentication, and monitor all of your traffic","title":"About Cloud Pak for Integration"},{"location":"#lectures","text":"In addition to the labs, this workshop uses the following lectures: Cloud Pak for Integration Overview Introduction to App Connect Introduction to API Connect Application Messaging with MQ and Apache Kafka","title":"Lectures"},{"location":"#credits","text":"This workshop was primarily written by David Carew , Henry Nash and Steve Martinelli .","title":"Credits"},{"location":"exercise-api-connect/","text":"Exercise - Create, deploy and test a new API using the API Connect Developer Toolkit \u00b6 In this lab you will create a new API using the OpenAPI definition of an existing RESTful web-service that gets realtime stock quotes. You will then test the deployed API by deploying the IBM Trader Lite application which is a simple stock trading sample, written as a set of microservices. The app uses the API definition that you will create to get realtime stock quotes. The architecture of the app is shown below: Tradr is a Node.js UI for the portfolio service The portfolio microservice sits at the center of the application. This microservice: persists trade data using JDBC to a MariaDB database invokes the stock-quote service that invokes an API defined in API Connect in CP4I to get stock quotes calls the trade-history service to store trade data in a PostgreSQL database that can be queried for reporting purposes. calls the trade-history service to get aggregated historical trade data. This lab is broken up into the following steps: Prerequisites Download the OpenAPI definition file for the external Stock Quote service Import the OpenAPI definition file into API Manager Configure the API Test the API Install the Trader Lite app Verify that the Trader Lite app is calling your API successfully Summary Prerequisites \u00b6 API Connect requires the Firefox browser in order to use the testing capabilities during API development (Step #4 of this lab) so it is recommended that you complete this entire lab using Firefox. Step 1: Download the OpenAPI definition file for the external Stock Quote service \u00b6 Note: You can click on any image in the instructions below to zoom in and see more details. When you do that just click on your browser's back button to return to the previous state. 1.1 In your browser right click on the following link, right click and select Save Link As ... from the context menu. Save the file stock-quote-api.yaml to your local system. stock-quote-api.yaml Step 2: Import the OpenAPI definition file into API Manager \u00b6 2.1 Go to your Workshop Information page and click on the API Connect component link. ( Note: if you no longer have the Workshop Information page available see: TODO - put link to instructions here). Note: This API Connect installation use self-signed certificates so you will have to click through any browser warning and continue to the URL. 2.2 Click on Common Services user registry 2.3 Login with the credentials for API Connect on the Workshop Information Page 2.4 Click on the Develop APIs and Products tile 2.5 Click Add API 2.6 On the next screen select Existing OpenAPI under Import and then click Next . 2.7 Now choose stock-quote-api.yaml from your local file system and click Next . 2.8 Do not select Activate API . Click Next 2.9 The API should be imported successfully as shown below. Click Edit API . Step 3: Configure the API \u00b6 After importing the existing API, the first step is to configure basic security before exposing it to other developers. By creating a client key you are able to identify the app using the services. Next, we will define the backend endpoints where the API is actually running. API Connect supports pointing to multiple backend endpoints to match your multiple build stage environments. 3.1 Scroll down in the Edit API screen and replace the Host address with $(catalog.host) to indicate that you want calls to the external API to go through API Connect. 3.2 Click Save 3.3 In the Edit API screen click Security Definitions in the left navigation 3.4 In the Security Definition section, click the Add button on the right. This will open a new view titled API Security Definition . 3.5 In the Name field, type client-id . 3.6 Under Type , choose API Key . This will reveal additional settings. 3.7 For Located In choose Header . For Key Type choose Client ID 3.8 Enter X-IBM-Client-Id as the Parameter Name . Your screen should now look like the image below. 3.9 Click the Save button to return to the Security Definitions section. 3.10 Click Security in the left menu. Click Add . Select the client-id as shown below and then click Save . 3.11 Next you'll define the endpoint for the external API. Click on Properties in the left menu. 3.12 Click on the target-url property. Click Add . 3.13 Choose the sandbox catalog and for the URL copy and paste the following URL: https://stock-trader-quote.us-south.cf.appdomain.cloud 3.14 Click Save to complete the configuration. Step 4: Test the API \u00b6 In the API designer, you have the ability to test the API immediately after creation in the Assemble view. 4.1 On the top Navigation, click Assemble . 4.2 Click invoke in the flow designer. Note the window on the right with the configuration. The invoke node calls the target-url (ie the external service). 4.3 Modify the URL field to include the request path passed in by the caller as well by appending $(request.path) to the URL . 4.3 Click Save 4.4 Click the play icon as indicated in the image below. 4.5 Click Activate API to publish the API to the gateway for testing. 4.6 After the API is published, click on the Test tab 4.7 The Request should be prefilled with the GET request to /stock-quote/djia . 4.8 Note that your client-id is prefilled for you. 4.9 Click Send . 4.10 If this is the first test of the API, you may see a certificate exception. Simply click on the link provided. This will open a new tab and allow you to click through to accept the self signed certificate 4.11 Go back to the previous tab and click Send again. 4.12 Now you should see a Response section with Status code 200 OK and the Body displaying the details of the Dow Jones Industrial Average . 4.13 Click on the downward facing arrow right beneath the Send button 4.14 Copy the value of the Client ID to a local text file so it can be used in the Stock Trader application later ( Note: this is a shortcut to the regular process of publishing the API and then subscribing to it as a consumer). 4.14 Next we'll get the endpoint for your API. Click on the Home icon (top left) and then click on the Manage Catalogs tile. 4.15 Click on the Sandbox tile. 4.16 Click on the Catalog settings tab and then on API Endpoints . Copy the gateway URL and put it in the same file that you used for the Client ID Step 5: Install TraderLite app \u00b6 5.1 In a separate browser tab go to the OpenShift console URL for the cluster assigned to you by for the workshop. 5.2 Click on Projects in the left navigation and then click on the student001 project in the list 5.3 Click on Installed Operators in the left navigation and then click on the TraderLite Operator in the list. 5.4 Click the Create Instance to start the installation of the TraderLite app. 5.5 Name the instance traderlite and replace the API Connect URL and API Connect ClientId with the respective values you saved in the previous section. Click Create 5.6 In the left navigation select Pods and then wait for all the TraderLite pods to have a status of Running and be in the Ready state. Step 6: Verify that the Trader Lite app is calling your API successfully \u00b6 6.1 In your OpenShift console click on Routes in the left navigation and then click on the icon next to the url for the tradr app (the UI for TraderLite) 6.2 Log in using the username stock and the password trader 6.3 If the DJIA summary has data then congratulations ! It means that the API you created in API Connect is working ! Summary \u00b6 Congratulations ! You successfully completed the following key steps in this lab: Created an API by importing an OpenAPI definition for an existing REST service. Configured a ClientID/API Key for security set up a proxy to the existing API. Tested the API in the API Connect developer toolkit. Deployed the Trader Lite app and configured it to use the API you created. Tested the Trader Lite app to make sure it successfully uses your API.","title":"Lab - Create, deploy and test an API using API Connect"},{"location":"exercise-api-connect/#exercise-create-deploy-and-test-a-new-api-using-the-api-connect-developer-toolkit","text":"In this lab you will create a new API using the OpenAPI definition of an existing RESTful web-service that gets realtime stock quotes. You will then test the deployed API by deploying the IBM Trader Lite application which is a simple stock trading sample, written as a set of microservices. The app uses the API definition that you will create to get realtime stock quotes. The architecture of the app is shown below: Tradr is a Node.js UI for the portfolio service The portfolio microservice sits at the center of the application. This microservice: persists trade data using JDBC to a MariaDB database invokes the stock-quote service that invokes an API defined in API Connect in CP4I to get stock quotes calls the trade-history service to store trade data in a PostgreSQL database that can be queried for reporting purposes. calls the trade-history service to get aggregated historical trade data. This lab is broken up into the following steps: Prerequisites Download the OpenAPI definition file for the external Stock Quote service Import the OpenAPI definition file into API Manager Configure the API Test the API Install the Trader Lite app Verify that the Trader Lite app is calling your API successfully Summary","title":"Exercise - Create, deploy and test a new API using the API Connect Developer Toolkit"},{"location":"exercise-api-connect/#prerequisites","text":"API Connect requires the Firefox browser in order to use the testing capabilities during API development (Step #4 of this lab) so it is recommended that you complete this entire lab using Firefox.","title":"Prerequisites"},{"location":"exercise-api-connect/#step-1-download-the-openapi-definition-file-for-the-external-stock-quote-service","text":"Note: You can click on any image in the instructions below to zoom in and see more details. When you do that just click on your browser's back button to return to the previous state. 1.1 In your browser right click on the following link, right click and select Save Link As ... from the context menu. Save the file stock-quote-api.yaml to your local system. stock-quote-api.yaml","title":"Step 1: Download the OpenAPI definition file for the external Stock Quote service"},{"location":"exercise-api-connect/#step-2-import-the-openapi-definition-file-into-api-manager","text":"2.1 Go to your Workshop Information page and click on the API Connect component link. ( Note: if you no longer have the Workshop Information page available see: TODO - put link to instructions here). Note: This API Connect installation use self-signed certificates so you will have to click through any browser warning and continue to the URL. 2.2 Click on Common Services user registry 2.3 Login with the credentials for API Connect on the Workshop Information Page 2.4 Click on the Develop APIs and Products tile 2.5 Click Add API 2.6 On the next screen select Existing OpenAPI under Import and then click Next . 2.7 Now choose stock-quote-api.yaml from your local file system and click Next . 2.8 Do not select Activate API . Click Next 2.9 The API should be imported successfully as shown below. Click Edit API .","title":"Step 2: Import the OpenAPI definition file into API Manager"},{"location":"exercise-api-connect/#step-3-configure-the-api","text":"After importing the existing API, the first step is to configure basic security before exposing it to other developers. By creating a client key you are able to identify the app using the services. Next, we will define the backend endpoints where the API is actually running. API Connect supports pointing to multiple backend endpoints to match your multiple build stage environments. 3.1 Scroll down in the Edit API screen and replace the Host address with $(catalog.host) to indicate that you want calls to the external API to go through API Connect. 3.2 Click Save 3.3 In the Edit API screen click Security Definitions in the left navigation 3.4 In the Security Definition section, click the Add button on the right. This will open a new view titled API Security Definition . 3.5 In the Name field, type client-id . 3.6 Under Type , choose API Key . This will reveal additional settings. 3.7 For Located In choose Header . For Key Type choose Client ID 3.8 Enter X-IBM-Client-Id as the Parameter Name . Your screen should now look like the image below. 3.9 Click the Save button to return to the Security Definitions section. 3.10 Click Security in the left menu. Click Add . Select the client-id as shown below and then click Save . 3.11 Next you'll define the endpoint for the external API. Click on Properties in the left menu. 3.12 Click on the target-url property. Click Add . 3.13 Choose the sandbox catalog and for the URL copy and paste the following URL: https://stock-trader-quote.us-south.cf.appdomain.cloud 3.14 Click Save to complete the configuration.","title":"Step 3: Configure the API"},{"location":"exercise-api-connect/#step-4-test-the-api","text":"In the API designer, you have the ability to test the API immediately after creation in the Assemble view. 4.1 On the top Navigation, click Assemble . 4.2 Click invoke in the flow designer. Note the window on the right with the configuration. The invoke node calls the target-url (ie the external service). 4.3 Modify the URL field to include the request path passed in by the caller as well by appending $(request.path) to the URL . 4.3 Click Save 4.4 Click the play icon as indicated in the image below. 4.5 Click Activate API to publish the API to the gateway for testing. 4.6 After the API is published, click on the Test tab 4.7 The Request should be prefilled with the GET request to /stock-quote/djia . 4.8 Note that your client-id is prefilled for you. 4.9 Click Send . 4.10 If this is the first test of the API, you may see a certificate exception. Simply click on the link provided. This will open a new tab and allow you to click through to accept the self signed certificate 4.11 Go back to the previous tab and click Send again. 4.12 Now you should see a Response section with Status code 200 OK and the Body displaying the details of the Dow Jones Industrial Average . 4.13 Click on the downward facing arrow right beneath the Send button 4.14 Copy the value of the Client ID to a local text file so it can be used in the Stock Trader application later ( Note: this is a shortcut to the regular process of publishing the API and then subscribing to it as a consumer). 4.14 Next we'll get the endpoint for your API. Click on the Home icon (top left) and then click on the Manage Catalogs tile. 4.15 Click on the Sandbox tile. 4.16 Click on the Catalog settings tab and then on API Endpoints . Copy the gateway URL and put it in the same file that you used for the Client ID","title":"Step 4: Test the API"},{"location":"exercise-api-connect/#step-5-install-traderlite-app","text":"5.1 In a separate browser tab go to the OpenShift console URL for the cluster assigned to you by for the workshop. 5.2 Click on Projects in the left navigation and then click on the student001 project in the list 5.3 Click on Installed Operators in the left navigation and then click on the TraderLite Operator in the list. 5.4 Click the Create Instance to start the installation of the TraderLite app. 5.5 Name the instance traderlite and replace the API Connect URL and API Connect ClientId with the respective values you saved in the previous section. Click Create 5.6 In the left navigation select Pods and then wait for all the TraderLite pods to have a status of Running and be in the Ready state.","title":"Step 5: Install TraderLite app"},{"location":"exercise-api-connect/#step-6-verify-that-the-trader-lite-app-is-calling-your-api-successfully","text":"6.1 In your OpenShift console click on Routes in the left navigation and then click on the icon next to the url for the tradr app (the UI for TraderLite) 6.2 Log in using the username stock and the password trader 6.3 If the DJIA summary has data then congratulations ! It means that the API you created in API Connect is working !","title":"Step 6: Verify that the Trader Lite app is calling your API successfully"},{"location":"exercise-api-connect/#summary","text":"Congratulations ! You successfully completed the following key steps in this lab: Created an API by importing an OpenAPI definition for an existing REST service. Configured a ClientID/API Key for security set up a proxy to the existing API. Tested the API in the API Connect developer toolkit. Deployed the Trader Lite app and configured it to use the API you created. Tested the Trader Lite app to make sure it successfully uses your API.","title":"Summary"},{"location":"exercise-app-connect/","text":"Exercise - Sync Salesforce data using IBM App Connect Enterprise \u00b6 In this lab you will create App Connect flows to sync client data in the IBM Trader Lite app to Salesforce. This will occur whenever a user of the IBM Trader Lite app creates a portfolio for a new client or accesses the data of an existing client. In order to accomplishment this at a minimum 2 flows are needed: A URL driven flow to push a new client to a Salesforce contact when the IBM Trader Lite app creates a portfolio for a new client An Event driven flow to push changes to the IBM Trader Lite app whenever a contact's data is updated in Salesforce The architecture of the app is shown below: The portfolio microservice invokes the REST endpoint of the new flow whenever a new client is created or read by the app and this results in a new contact being created in, or read from Salesforce. This lab is broken up into the following sections: Sign up for Salesforce Developer Edition Create a Salesforce Connected App Setup connectivity to Salesforce in App Connect Designer Create the flows in App Connect Designer Create an Integration Server instance and deploy your flows Get the REST endpoint of your App Connect Flow Test your App Connect Flow with Trader Lite Summary Section 1: Sign up for Salesforce Developer Edition \u00b6 1.1 In your browser go to the following URL to sign up for Salesforce Developer Edition - a full featured version of the Salesforce Lightning Platform. Note: If you already have access to the Salesforce Developer Edition or a paid version of Salesforce, skip to Step 1.2 . Salesforce Developer Edition signup 1.2 Enter the required information and follow the prompts to complete the signup process. Note : You can click on any image in the instructions below to zoom in and see more details. When you do that just click on your browser's back button to return to the previous state. Section 2: Create a Salesforce Connected App \u00b6 In this section you'll create a Connected App in Salesforce so that the App Connect flows that you create later will be able to access your Salesforce data. 2.1 Login to Salesforce 2.2 Click on your avatar (top right) and select Switch to Salesforce Classic from the context menu. 2.3 Click on Setup . 2.4 In the left navigation area, scroll down to the Build section, expand Create and click on Apps 2.5 Scroll down to the Connected Apps section and click on New 2.6 Fill in the required values for a new Connected App a. Set the Connected App Name property to IBM App Connect b. Set the API Name to IBM_App_Connect c. Enter your email address as the Contact Email 2.7 Configure the OAuth settings Select the Enable OAuth Setting check box. Set the Callback URL to https://www.ibm.com Under Selected OAuth Scopes select Access and manage your data (api) and click the arrow under the Add label 2.8 Scroll down to the bottom of the web page and click Save 2.9 Copy the Consumer Key and Consumer Secret to a text file. You will need them later to connect to Salesforce. 2.10 Click on your user name and select My Settings . On the left under the Personal section click on Reset My Security Token 2.11 Check your email for the email address that you use as your Salesforce username. You should receive an email from Salesforce with the subject Your new Salesforce security token . Copy the Security Token to the same text file that you used for the Consumer Key and Consumer Secret Section 3: Setup connectivity to Salesforce in App Connect Designer \u00b6 App Connect Designer is a component of Cloud Pak for Integration that provides an authoring environment in which you can create, test, and share flows for an API. You can share your flows by using the export and import functions, or by adding them to an Asset Repository for reuse. 3.1 Go to your Workshop Information page and click on the App Connect Designer component link. ( Note: if you no longer have the Workshop Information page available see: TODO - put link to instructions here). 3.2 If prompted to login, select Default authentication and enter the credentials on the Workshop Information page 3.5 Click the Catalog icon 3.6 Expand Salesforce and click Connect 3.7 Enter the following values referring to the text file from the previous section where you saved your Salesforce credentials. For the Login URL enter https://login.salesforce.com For the Username enter the email you use to login to Salesforce For the Password enter the password you use to login to Salesforce. Then append the value of the Security Token (that you saved in the previous section) to the password. For example if your password is foo and your security token is bar you would enter foobar into the password field. For the Client Id copy and past the value of the Consumer Key (that you saved in the previous section). For the Client Secret copy and past the value of the Consumer Secret (that you saved in the previous section). NOTE : If you receieve an error that the connection to Salesforce failed, then it is recommended to re-check the credentials and try again. You can re-enter the credentials for this account by clicking on the three dots next to the account name (typically this is Account 1 ), and clicking Update Account from the subsequent menu. The previous details are cleared, so you will need to enter them all again. 3.8 Click on Connect . The connection will be given a default name of the form Account n . Section 4: Create the flows in App Connect Designer \u00b6 4.1 In App Connect Designer, click the Dashboard icon. 4.2 Click New and select Flows for an API 4.3 Name the flow sfpush Name the model Client 4.4 Click Create Model 4.5 Next you will add the properties of the input data for your flow. Note : Name them exactly as instructed (including matching case) so that your flow will work with the Stock Trader Lite app. Enter ClientId as the first property and then click Add property + Enter FirstName as the next property and then click Add property + Enter LastName as the next property and then click Add property + Enter Email as the next property and then click Add property + Enter MobilePhone as the next property When you're done the screen should look like the following: 4.6 Click Operations and then select Create Client ](images/operation.png) 4.7 Click Implement flow 4.8 Click on the + icon. Scroll down to Salesforce Select your account from the dropdown Expand Contacts Click Create Contact 4.9 Next you'll map the properties from your model to the Salesforce Contact properties. The properties have the same names as their Salesforce equivalents so click on Auto match fields to complete the mapping 4.10 Click on Response to configure what will be returned by the flow. Click in the text box for the Client Id property and then click on the icon just to the right of the field. Select the Contact Id property of the Salesforce contact. 4.11 Next you'll test the flow to make sure it works. Click on the middle part of the flow and then click on the edit icon. 4.12 Click on Request body parameters and then edit the input parameters that will be used in the test. Note : Salesforce does enforce formatting for telephone numbers and email addresses so use valid formatting for those Set the Client Id to blank. This value will be generated by Salesforce and returned. Enter a FirstName value. Enter a LastName value. Enter an Email in a valid email format Enter a MobileNumber in a valid format 4.13 Click the test icon. Verify that the operation returns a 200 HTTP status code. 4.15 Click View details to see the raw data returned from the call to Salesforce (note this is not the same as the data returned by the flow which you defined in the Response stage of the flow). 4.16 Click Done 4.17 Next you'll build a reverse flow. One that will call an API in the TraderLite app whenever a Salesforce contact is updated Click on the Catalog icon and select the APIs 4.18 In your browser right click on the following link, right click and select Save Link As ... from the context menu. Save the file sfsync.json to your local system. This is an OpenAPI definition of the API in TraderLite that will update client data. sfsync.json 4.19 Back in App Connect click on Add your API now 4.20 Import the file sfsync.json , and name the API Salesforce sync 4.21 Click Add API 4.22 Click on the down arrow and then on Connect 4.23 Accept the default values and click again Connect again 4.24 Click on the Dashboard icon 4.25 Click New and select Event-driven flow 4.26 Name the flow sfevents , expand the Salesforce section and select Updated contact under Contacts 4.27 Click the + icon and then on the APIs tab. Expand your Salesforce sync API and click on PUT /salesforce/contacts 4.28 Click in the icon right next to the ClientId field. Map the ClientId field to the Salesforce ContactId field Map the FirstName field to the Salesforce FirstName field Map the LastName field to the Salesforce LastName field Map the Email field to the Salesforce Email field Map the MobilePhone field to the Salesforce MobilePhone field 4.29 Click on the Dashboard icon at the left 4.30 Export your sfevents flow by clicking on the 3 period icon and selecting Export.. from the context menu. 4.31 Select Runtime flow asset (BAR) and click Export 4.32 Adjust the target folder if you wish and then click Save 4.33 Repeat for the sfpush flow also selecting Runtime flow asset (BAR) and saving to your local system. Section 5: Create an Integration Server instance and deploy your flows \u00b6 In this step you'll create an Integration Server instance and deploy your flows to it. 5.1 Go to your Workshop Information page and click on the App Connect Dashboard component link. ( Note: if you no longer have the Workshop Information page available see: TODO - put link to instructions here). 5.2 Select Default Authentication and login with your credentials if prompted 5.3 Click Create server 5.4 Select the Quick start designer integration tile and click Next 5.5 Upload the sfevents.bar file and click Next 5.6 Select the Accounts file and leave the others unchecked. Click Next Note : Without Accounts checked, your flow will not work when deployed . This allows the secret with your Salesforce credentials to be accessible to the deployed flow. 5.7 Name the server sfevents and click Create . It will take a while for the server to provision so you can continue deploying the other flow. Click Create server 5.8 Select the Quick start designer integration tile and click Next 5.9 Upload the sfpush.bar file and click Next 5.10 Select the Accounts file and leave the others unchecked. Click Next Note : Without Accounts checked, your flow will not work when deployed . This allows the secret with your Salesforce credentials to be accessible to the deployed flow. 5.11 Name the server sfpush and click and click Create . 5.12 Wait for both servers be in the Started state. They will take about 2 or 3 minutes. Note: You may have to refresh the page to get the latest server status Section 6: Get the REST endpoint of your App Connect Flow \u00b6 6.1 In the App Connect Dashboard click on the tile for the sfpush server 6.2 Click on the API tile to see the details of the flow's API 6.3 You should see the details of your flow's API 6.4 Copy the Endpoint and save it in a text file. Section 7: Test your App Connect Flows with Trader Lite \u00b6 7.1 Go to the OpenShift console of your assigned cluster. Select the student001 project. In the navigation on the left select Installed Operators and select the TraderLite Operator 7.2 Click on the TraderLite app tab 7.3 Click on the 3 periods to the right of the existing TraderLite CRD and select Edit TraderLite from the context menu. 7.4 Scroll down to line 62 and change the enabled \" field value to true and paste the endpoint of your API flow that you saved earlier as the url value on line 66. 7.5 Click Save . 7.6 In the navigation area on the left select Pods in the Workloads section. You should see that a new instance of the Portfolio pod has been started. 7.7 Wait until the new pod is in the Ready state and the previous pod has terminated before continuing. Note : You will know the traderlite-portfolio-xxxxx pod is in a ready state when the Ready column shows 1/1 . You will also see that the created column will have a recent timestamp value.* 7.8 In the left navigation click on Routes (in the Networking category) and then click on the icon next to the url for the tradr app (the UI for TraderLite) 7.9 Log in using the username stock and the password trader 7.10 Click Add Client and fill in the form. You must use valid email and phone number formats to avoid errors. 7.11 Click Save 7.12 Click on the Portfolio ID of the new client to see the details of the portfolio 7.13 Click on the Client Details tab. Because the TraderLite app is now calling your sfpush flow whenever a new client is created, you should see a Salesforce Contact Id in the form of a link. 7.14 Click on the Contact Id link to see the contact in Salesforce (you may be prompted for your Salesforce credentials) Note : If the link does not work because of geo specific URLs for Salesforce, login in to Salesforce by yourself and look at the new contact. The easiest way to find the new contact is to enter the first and last name in the search bar in Salesforce. 7.15 Now test your reverse flow (i.e. when a contact is modified in Salesforce). Click on the Edit button for the contact and change the mobile number. Click Save . 7.16 Go back to the tab with the TraderLite app and refresh the page with the Client Details. Click on the Client Details tab and verify that the phone number has been updated with the new value you added in Salesforce. Summary \u00b6 Congratulations ! You successfully completed the following key tasks in this lab: Connected to Salesforce Created an App Connect designer flow to push client data to Salesforce contacts. Created an Event Driven flow to push Salesforce contact updates to the TraderLite App via an API call Deployed the flows as Integration Servers in App Connect Dashboard Tested the flow with the Trader Lite app.","title":"Lab - Sync Salesforce data using IBM App Connect"},{"location":"exercise-app-connect/#exercise-sync-salesforce-data-using-ibm-app-connect-enterprise","text":"In this lab you will create App Connect flows to sync client data in the IBM Trader Lite app to Salesforce. This will occur whenever a user of the IBM Trader Lite app creates a portfolio for a new client or accesses the data of an existing client. In order to accomplishment this at a minimum 2 flows are needed: A URL driven flow to push a new client to a Salesforce contact when the IBM Trader Lite app creates a portfolio for a new client An Event driven flow to push changes to the IBM Trader Lite app whenever a contact's data is updated in Salesforce The architecture of the app is shown below: The portfolio microservice invokes the REST endpoint of the new flow whenever a new client is created or read by the app and this results in a new contact being created in, or read from Salesforce. This lab is broken up into the following sections: Sign up for Salesforce Developer Edition Create a Salesforce Connected App Setup connectivity to Salesforce in App Connect Designer Create the flows in App Connect Designer Create an Integration Server instance and deploy your flows Get the REST endpoint of your App Connect Flow Test your App Connect Flow with Trader Lite Summary","title":"Exercise - Sync Salesforce data using IBM App Connect Enterprise"},{"location":"exercise-app-connect/#section-1-sign-up-for-salesforce-developer-edition","text":"1.1 In your browser go to the following URL to sign up for Salesforce Developer Edition - a full featured version of the Salesforce Lightning Platform. Note: If you already have access to the Salesforce Developer Edition or a paid version of Salesforce, skip to Step 1.2 . Salesforce Developer Edition signup 1.2 Enter the required information and follow the prompts to complete the signup process. Note : You can click on any image in the instructions below to zoom in and see more details. When you do that just click on your browser's back button to return to the previous state.","title":"Section 1: Sign up for Salesforce Developer Edition"},{"location":"exercise-app-connect/#section-2-create-a-salesforce-connected-app","text":"In this section you'll create a Connected App in Salesforce so that the App Connect flows that you create later will be able to access your Salesforce data. 2.1 Login to Salesforce 2.2 Click on your avatar (top right) and select Switch to Salesforce Classic from the context menu. 2.3 Click on Setup . 2.4 In the left navigation area, scroll down to the Build section, expand Create and click on Apps 2.5 Scroll down to the Connected Apps section and click on New 2.6 Fill in the required values for a new Connected App a. Set the Connected App Name property to IBM App Connect b. Set the API Name to IBM_App_Connect c. Enter your email address as the Contact Email 2.7 Configure the OAuth settings Select the Enable OAuth Setting check box. Set the Callback URL to https://www.ibm.com Under Selected OAuth Scopes select Access and manage your data (api) and click the arrow under the Add label 2.8 Scroll down to the bottom of the web page and click Save 2.9 Copy the Consumer Key and Consumer Secret to a text file. You will need them later to connect to Salesforce. 2.10 Click on your user name and select My Settings . On the left under the Personal section click on Reset My Security Token 2.11 Check your email for the email address that you use as your Salesforce username. You should receive an email from Salesforce with the subject Your new Salesforce security token . Copy the Security Token to the same text file that you used for the Consumer Key and Consumer Secret","title":"Section 2: Create a Salesforce Connected App"},{"location":"exercise-app-connect/#section-3-setup-connectivity-to-salesforce-in-app-connect-designer","text":"App Connect Designer is a component of Cloud Pak for Integration that provides an authoring environment in which you can create, test, and share flows for an API. You can share your flows by using the export and import functions, or by adding them to an Asset Repository for reuse. 3.1 Go to your Workshop Information page and click on the App Connect Designer component link. ( Note: if you no longer have the Workshop Information page available see: TODO - put link to instructions here). 3.2 If prompted to login, select Default authentication and enter the credentials on the Workshop Information page 3.5 Click the Catalog icon 3.6 Expand Salesforce and click Connect 3.7 Enter the following values referring to the text file from the previous section where you saved your Salesforce credentials. For the Login URL enter https://login.salesforce.com For the Username enter the email you use to login to Salesforce For the Password enter the password you use to login to Salesforce. Then append the value of the Security Token (that you saved in the previous section) to the password. For example if your password is foo and your security token is bar you would enter foobar into the password field. For the Client Id copy and past the value of the Consumer Key (that you saved in the previous section). For the Client Secret copy and past the value of the Consumer Secret (that you saved in the previous section). NOTE : If you receieve an error that the connection to Salesforce failed, then it is recommended to re-check the credentials and try again. You can re-enter the credentials for this account by clicking on the three dots next to the account name (typically this is Account 1 ), and clicking Update Account from the subsequent menu. The previous details are cleared, so you will need to enter them all again. 3.8 Click on Connect . The connection will be given a default name of the form Account n .","title":"Section 3: Setup connectivity to Salesforce in App Connect Designer"},{"location":"exercise-app-connect/#section-4-create-the-flows-in-app-connect-designer","text":"4.1 In App Connect Designer, click the Dashboard icon. 4.2 Click New and select Flows for an API 4.3 Name the flow sfpush Name the model Client 4.4 Click Create Model 4.5 Next you will add the properties of the input data for your flow. Note : Name them exactly as instructed (including matching case) so that your flow will work with the Stock Trader Lite app. Enter ClientId as the first property and then click Add property + Enter FirstName as the next property and then click Add property + Enter LastName as the next property and then click Add property + Enter Email as the next property and then click Add property + Enter MobilePhone as the next property When you're done the screen should look like the following: 4.6 Click Operations and then select Create Client ](images/operation.png) 4.7 Click Implement flow 4.8 Click on the + icon. Scroll down to Salesforce Select your account from the dropdown Expand Contacts Click Create Contact 4.9 Next you'll map the properties from your model to the Salesforce Contact properties. The properties have the same names as their Salesforce equivalents so click on Auto match fields to complete the mapping 4.10 Click on Response to configure what will be returned by the flow. Click in the text box for the Client Id property and then click on the icon just to the right of the field. Select the Contact Id property of the Salesforce contact. 4.11 Next you'll test the flow to make sure it works. Click on the middle part of the flow and then click on the edit icon. 4.12 Click on Request body parameters and then edit the input parameters that will be used in the test. Note : Salesforce does enforce formatting for telephone numbers and email addresses so use valid formatting for those Set the Client Id to blank. This value will be generated by Salesforce and returned. Enter a FirstName value. Enter a LastName value. Enter an Email in a valid email format Enter a MobileNumber in a valid format 4.13 Click the test icon. Verify that the operation returns a 200 HTTP status code. 4.15 Click View details to see the raw data returned from the call to Salesforce (note this is not the same as the data returned by the flow which you defined in the Response stage of the flow). 4.16 Click Done 4.17 Next you'll build a reverse flow. One that will call an API in the TraderLite app whenever a Salesforce contact is updated Click on the Catalog icon and select the APIs 4.18 In your browser right click on the following link, right click and select Save Link As ... from the context menu. Save the file sfsync.json to your local system. This is an OpenAPI definition of the API in TraderLite that will update client data. sfsync.json 4.19 Back in App Connect click on Add your API now 4.20 Import the file sfsync.json , and name the API Salesforce sync 4.21 Click Add API 4.22 Click on the down arrow and then on Connect 4.23 Accept the default values and click again Connect again 4.24 Click on the Dashboard icon 4.25 Click New and select Event-driven flow 4.26 Name the flow sfevents , expand the Salesforce section and select Updated contact under Contacts 4.27 Click the + icon and then on the APIs tab. Expand your Salesforce sync API and click on PUT /salesforce/contacts 4.28 Click in the icon right next to the ClientId field. Map the ClientId field to the Salesforce ContactId field Map the FirstName field to the Salesforce FirstName field Map the LastName field to the Salesforce LastName field Map the Email field to the Salesforce Email field Map the MobilePhone field to the Salesforce MobilePhone field 4.29 Click on the Dashboard icon at the left 4.30 Export your sfevents flow by clicking on the 3 period icon and selecting Export.. from the context menu. 4.31 Select Runtime flow asset (BAR) and click Export 4.32 Adjust the target folder if you wish and then click Save 4.33 Repeat for the sfpush flow also selecting Runtime flow asset (BAR) and saving to your local system.","title":"Section 4: Create the flows in App Connect Designer"},{"location":"exercise-app-connect/#section-5-create-an-integration-server-instance-and-deploy-your-flows","text":"In this step you'll create an Integration Server instance and deploy your flows to it. 5.1 Go to your Workshop Information page and click on the App Connect Dashboard component link. ( Note: if you no longer have the Workshop Information page available see: TODO - put link to instructions here). 5.2 Select Default Authentication and login with your credentials if prompted 5.3 Click Create server 5.4 Select the Quick start designer integration tile and click Next 5.5 Upload the sfevents.bar file and click Next 5.6 Select the Accounts file and leave the others unchecked. Click Next Note : Without Accounts checked, your flow will not work when deployed . This allows the secret with your Salesforce credentials to be accessible to the deployed flow. 5.7 Name the server sfevents and click Create . It will take a while for the server to provision so you can continue deploying the other flow. Click Create server 5.8 Select the Quick start designer integration tile and click Next 5.9 Upload the sfpush.bar file and click Next 5.10 Select the Accounts file and leave the others unchecked. Click Next Note : Without Accounts checked, your flow will not work when deployed . This allows the secret with your Salesforce credentials to be accessible to the deployed flow. 5.11 Name the server sfpush and click and click Create . 5.12 Wait for both servers be in the Started state. They will take about 2 or 3 minutes. Note: You may have to refresh the page to get the latest server status","title":"Section 5: Create an Integration Server instance and deploy your flows"},{"location":"exercise-app-connect/#section-6-get-the-rest-endpoint-of-your-app-connect-flow","text":"6.1 In the App Connect Dashboard click on the tile for the sfpush server 6.2 Click on the API tile to see the details of the flow's API 6.3 You should see the details of your flow's API 6.4 Copy the Endpoint and save it in a text file.","title":"Section 6: Get the REST endpoint of your App Connect Flow"},{"location":"exercise-app-connect/#section-7-test-your-app-connect-flows-with-trader-lite","text":"7.1 Go to the OpenShift console of your assigned cluster. Select the student001 project. In the navigation on the left select Installed Operators and select the TraderLite Operator 7.2 Click on the TraderLite app tab 7.3 Click on the 3 periods to the right of the existing TraderLite CRD and select Edit TraderLite from the context menu. 7.4 Scroll down to line 62 and change the enabled \" field value to true and paste the endpoint of your API flow that you saved earlier as the url value on line 66. 7.5 Click Save . 7.6 In the navigation area on the left select Pods in the Workloads section. You should see that a new instance of the Portfolio pod has been started. 7.7 Wait until the new pod is in the Ready state and the previous pod has terminated before continuing. Note : You will know the traderlite-portfolio-xxxxx pod is in a ready state when the Ready column shows 1/1 . You will also see that the created column will have a recent timestamp value.* 7.8 In the left navigation click on Routes (in the Networking category) and then click on the icon next to the url for the tradr app (the UI for TraderLite) 7.9 Log in using the username stock and the password trader 7.10 Click Add Client and fill in the form. You must use valid email and phone number formats to avoid errors. 7.11 Click Save 7.12 Click on the Portfolio ID of the new client to see the details of the portfolio 7.13 Click on the Client Details tab. Because the TraderLite app is now calling your sfpush flow whenever a new client is created, you should see a Salesforce Contact Id in the form of a link. 7.14 Click on the Contact Id link to see the contact in Salesforce (you may be prompted for your Salesforce credentials) Note : If the link does not work because of geo specific URLs for Salesforce, login in to Salesforce by yourself and look at the new contact. The easiest way to find the new contact is to enter the first and last name in the search bar in Salesforce. 7.15 Now test your reverse flow (i.e. when a contact is modified in Salesforce). Click on the Edit button for the contact and change the mobile number. Click Save . 7.16 Go back to the tab with the TraderLite app and refresh the page with the Client Details. Click on the Client Details tab and verify that the phone number has been updated with the new value you added in Salesforce.","title":"Section 7: Test your App Connect Flows with Trader Lite"},{"location":"exercise-app-connect/#summary","text":"Congratulations ! You successfully completed the following key tasks in this lab: Connected to Salesforce Created an App Connect designer flow to push client data to Salesforce contacts. Created an Event Driven flow to push Salesforce contact updates to the TraderLite App via an API call Deployed the flows as Integration Servers in App Connect Dashboard Tested the flow with the Trader Lite app.","title":"Summary"},{"location":"exercise-event-streaming/","text":"Exercise - Using IBM MQ and Kafka for near realtime data replication \u00b6 In this lab you will use IBM MQ and IBM Event Streams to replicate data from a transactional database to a reporting database. The pattern used allows for seamless horizontal scaling to minimize the latency between the time the transaction is committed to the transactional database and when it is available to be queried in the reporting database. The architecture of the solution you will build is shown below: The portfolio microservice sits at the center of the application. This microservice: sends completed transactions to an IBM MQ queue. calls the trade-history service to get aggregated historical trade data. The Kafka Connect source uses the Kafka Connect framework and an IBM MQ source to consume the transaction data from IBM MQ and sends it to a topic in Kafka. By scaling this service horizontally you can decrease the latency between the time the transaction is committed to the transactional database and when it is available to be queried in the reporting database, The Kafka Connect sink uses the Kafka Connect framework and a Mongodb sink to receive the transaction data from Kafka and publishes it to the reporting database. By scaling this service horizontally you can decrease the latency between the time the transaction is committed to the transactional database and when it is available to be queried in the reporting database. This lab is broken up into the following steps: Prerequisites Add messaging components to the Trader Lite app Generate some test data with the Trader Lite app Verify your trades have been sent as messages to IBM MQ Start Kafka Replication Verify transaction data was replicated to the Trade History database Summary Prerequisites \u00b6 The TraderLite application needs to be up and running on your cluster. If you've completed the API Connect and/or the Salesforce integration labs then you will have the app running already. If you have not completed either of those labs, follow the installation instructions in this FAQ before continuing to step 1 below. Step 1: Add messaging components to the Trader Lite app \u00b6 In this section you will modify the TraderLite app to start storing transactions as MQ messages, without setting up the KafkaConnect part that will move the transactions out of MQ, into Kafka and then into MongoDB. This demonstrates how MQ can serve as a reliable store and forward buffer especially during temporary network disruption. Note: You can click on any image in the instructions below to zoom in and see more details. When you do that just click on your browser's back button to return to the previous state. 1.1 Go to the OpenShift console of your assigned cluster. Select the student001 project. In the navigation on the left select Installed Operators in the Operators section and select the TraderLite Operator 1.2 Click on the TraderLite app tab 1.3 Click on the 3 periods to the right of the existing TraderLite CRD and select Edit TraderLite from the context menu. 1.4 Click on the Details tab 1.5 Scroll down and toggle Kafka Integration to True and click on Confirm change 1.6 In the navigation area on the left select Pods in the Workloads section. You should see that a new instance of the Portfolio pod has been started. Note: You can enter traderlite in the search by name input field to filter the pods. 1.7 Wait until the new pod is in the Ready state and the previous pod has terminated before continuing. Note: You will know the traderlite-portfolio-xxxxx pod is in a ready state when the Ready column shows 1/1 . You will also see that the created column will have a recent timestamp value. Step 2: Generate some test data with the Trader Lite app \u00b6 2.1 In your OpenShift console click on Routes in the left navigation under the Networking section and then click on the icon next to the url for the tradr app (the UI for TraderLite) 2.2 Log in using the username stock and the password trader 2.3 Click Add Client fill in the form. You must use valid email and phone number formats to avoid validation errors. 2.4 Click Save 2.5 Click on the Portfolio ID of the new client to see the details of the portfolio 2.6 Buy some shares of 2 or 3 different companies and then sell a portion of one of the shares you just bought. To buy shares, click the Buy Stock button, then select a company and enter a share amount. To sell shares, click the Sell stock button, then select the company symbol and enter the number of shares to sell. Note: Your ROI will be off because we are not yet replicating the historical trade data that goes in to the calculation of the ROI. Step 3: View messages in IBM MQ \u00b6 3.1 Go to your Workshop Information page and click on the MQ component link. The webpage will launch in a separate browser tab, you may be prompted to that the connection is not private. In which case, click the Advanced button and click the link to proceed to the page. Note: If you no longer have the Workshop Information page available, follow the instructions in the FAQ 3.2 If prompted to login, select Default authentication and enter the credentials on the Workshop Information page 3.3 Click on the Manage QMTRADER tile 3.4 Click on the queue TRADER.QUEUE 3.5 You should see messages for the trades you just executed. The number of messages in the queue will vary based on the number of buy/sell transactions you performed in the previous steps. 3.6 Keep the browser tab with the MQ web interface open as you'll need it later in the lab. Step 4: Start Kafka Replication \u00b6 In this section you will configure the TraderLite app to start moving the transaction data out of MQ, into Kafka and then into the MongoDB reporting database. 4.1 Go to the OpenShift console of your assigned cluster. In the navigation on the left select Installed Operators and select the TraderLite Operator 4.2 Click on the TraderLite app tab 4.3 Click on the 3 periods to the right of the existing TraderLite CRD and select Edit TraderLite from the context menu. 4.4 Click on the Details tab 4.5 Scroll down and toggle Kafka Connect enabled to True and click on Confirm change 4.6 In the navigation on the left select Installed Operators and select the Strimzi operator. 4.7 Click on the All instances tab and wait for the mq-source and mongodb-sink connectors to be in the Ready state before continuing. 4.8 Go back to the browser tab with the MQ Console and verify that all the messages have been consumed by the mq-source connector. (Note: You may need to reload this browser tab to see that the messages have been consumed.) Step 5: Verify transaction data was replicated to the Trade History database \u00b6 5.1 Go to the OpenShift console of your assigned cluster. In the navigation on the left select Routes in the Networking section. 5.2 Copy the link for the trade-history microservice and paste it into a new browser tab. Note: You will get a 404 (Not Found) message if you try to access this URL as is. This is because the trade-history microservice requires extra path information. 5.3 Append the string /trades/1000 to the address you pasted - you should get back some JSON with the test transactions that you ran earlier. Summary \u00b6 Congratulations ! You successfully completed the following key steps in this lab: Configured the Trader Lite app to use MQ Deploy Kafka Connect Generated transactions in the Trader Lite app and verified that the data is being replicated via MQ and Kafka.","title":"Lab - Using IBM MQ and Kafka for near realtime data replication"},{"location":"exercise-event-streaming/#exercise-using-ibm-mq-and-kafka-for-near-realtime-data-replication","text":"In this lab you will use IBM MQ and IBM Event Streams to replicate data from a transactional database to a reporting database. The pattern used allows for seamless horizontal scaling to minimize the latency between the time the transaction is committed to the transactional database and when it is available to be queried in the reporting database. The architecture of the solution you will build is shown below: The portfolio microservice sits at the center of the application. This microservice: sends completed transactions to an IBM MQ queue. calls the trade-history service to get aggregated historical trade data. The Kafka Connect source uses the Kafka Connect framework and an IBM MQ source to consume the transaction data from IBM MQ and sends it to a topic in Kafka. By scaling this service horizontally you can decrease the latency between the time the transaction is committed to the transactional database and when it is available to be queried in the reporting database, The Kafka Connect sink uses the Kafka Connect framework and a Mongodb sink to receive the transaction data from Kafka and publishes it to the reporting database. By scaling this service horizontally you can decrease the latency between the time the transaction is committed to the transactional database and when it is available to be queried in the reporting database. This lab is broken up into the following steps: Prerequisites Add messaging components to the Trader Lite app Generate some test data with the Trader Lite app Verify your trades have been sent as messages to IBM MQ Start Kafka Replication Verify transaction data was replicated to the Trade History database Summary","title":"Exercise - Using IBM MQ and Kafka for near realtime data replication"},{"location":"exercise-event-streaming/#prerequisites","text":"The TraderLite application needs to be up and running on your cluster. If you've completed the API Connect and/or the Salesforce integration labs then you will have the app running already. If you have not completed either of those labs, follow the installation instructions in this FAQ before continuing to step 1 below.","title":"Prerequisites"},{"location":"exercise-event-streaming/#step-1-add-messaging-components-to-the-trader-lite-app","text":"In this section you will modify the TraderLite app to start storing transactions as MQ messages, without setting up the KafkaConnect part that will move the transactions out of MQ, into Kafka and then into MongoDB. This demonstrates how MQ can serve as a reliable store and forward buffer especially during temporary network disruption. Note: You can click on any image in the instructions below to zoom in and see more details. When you do that just click on your browser's back button to return to the previous state. 1.1 Go to the OpenShift console of your assigned cluster. Select the student001 project. In the navigation on the left select Installed Operators in the Operators section and select the TraderLite Operator 1.2 Click on the TraderLite app tab 1.3 Click on the 3 periods to the right of the existing TraderLite CRD and select Edit TraderLite from the context menu. 1.4 Click on the Details tab 1.5 Scroll down and toggle Kafka Integration to True and click on Confirm change 1.6 In the navigation area on the left select Pods in the Workloads section. You should see that a new instance of the Portfolio pod has been started. Note: You can enter traderlite in the search by name input field to filter the pods. 1.7 Wait until the new pod is in the Ready state and the previous pod has terminated before continuing. Note: You will know the traderlite-portfolio-xxxxx pod is in a ready state when the Ready column shows 1/1 . You will also see that the created column will have a recent timestamp value.","title":"Step 1: Add messaging components to the Trader Lite app"},{"location":"exercise-event-streaming/#step-2-generate-some-test-data-with-the-trader-lite-app","text":"2.1 In your OpenShift console click on Routes in the left navigation under the Networking section and then click on the icon next to the url for the tradr app (the UI for TraderLite) 2.2 Log in using the username stock and the password trader 2.3 Click Add Client fill in the form. You must use valid email and phone number formats to avoid validation errors. 2.4 Click Save 2.5 Click on the Portfolio ID of the new client to see the details of the portfolio 2.6 Buy some shares of 2 or 3 different companies and then sell a portion of one of the shares you just bought. To buy shares, click the Buy Stock button, then select a company and enter a share amount. To sell shares, click the Sell stock button, then select the company symbol and enter the number of shares to sell. Note: Your ROI will be off because we are not yet replicating the historical trade data that goes in to the calculation of the ROI.","title":"Step 2: Generate some test data with the Trader Lite app"},{"location":"exercise-event-streaming/#step-3-view-messages-in-ibm-mq","text":"3.1 Go to your Workshop Information page and click on the MQ component link. The webpage will launch in a separate browser tab, you may be prompted to that the connection is not private. In which case, click the Advanced button and click the link to proceed to the page. Note: If you no longer have the Workshop Information page available, follow the instructions in the FAQ 3.2 If prompted to login, select Default authentication and enter the credentials on the Workshop Information page 3.3 Click on the Manage QMTRADER tile 3.4 Click on the queue TRADER.QUEUE 3.5 You should see messages for the trades you just executed. The number of messages in the queue will vary based on the number of buy/sell transactions you performed in the previous steps. 3.6 Keep the browser tab with the MQ web interface open as you'll need it later in the lab.","title":"Step 3: View messages in IBM MQ"},{"location":"exercise-event-streaming/#step-4-start-kafka-replication","text":"In this section you will configure the TraderLite app to start moving the transaction data out of MQ, into Kafka and then into the MongoDB reporting database. 4.1 Go to the OpenShift console of your assigned cluster. In the navigation on the left select Installed Operators and select the TraderLite Operator 4.2 Click on the TraderLite app tab 4.3 Click on the 3 periods to the right of the existing TraderLite CRD and select Edit TraderLite from the context menu. 4.4 Click on the Details tab 4.5 Scroll down and toggle Kafka Connect enabled to True and click on Confirm change 4.6 In the navigation on the left select Installed Operators and select the Strimzi operator. 4.7 Click on the All instances tab and wait for the mq-source and mongodb-sink connectors to be in the Ready state before continuing. 4.8 Go back to the browser tab with the MQ Console and verify that all the messages have been consumed by the mq-source connector. (Note: You may need to reload this browser tab to see that the messages have been consumed.)","title":"Step 4: Start Kafka Replication"},{"location":"exercise-event-streaming/#step-5-verify-transaction-data-was-replicated-to-the-trade-history-database","text":"5.1 Go to the OpenShift console of your assigned cluster. In the navigation on the left select Routes in the Networking section. 5.2 Copy the link for the trade-history microservice and paste it into a new browser tab. Note: You will get a 404 (Not Found) message if you try to access this URL as is. This is because the trade-history microservice requires extra path information. 5.3 Append the string /trades/1000 to the address you pasted - you should get back some JSON with the test transactions that you ran earlier.","title":"Step 5: Verify transaction data was replicated to the Trade History database"},{"location":"exercise-event-streaming/#summary","text":"Congratulations ! You successfully completed the following key steps in this lab: Configured the Trader Lite app to use MQ Deploy Kafka Connect Generated transactions in the Trader Lite app and verified that the data is being replicated via MQ and Kafka.","title":"Summary"},{"location":"faq/","text":"Frequently Asked Questions & Helpful Tips / Tricks \u00b6 How do I get to the workshop information page? I don't have the trader lite application, how can I install it? I am receiving a Your connection is not private message, what should I do? Note: You can click on any image in the instructions below to zoom in and see more details. When you do that just click on your browser's back button to return to the previous state. Workshop Information Page \u00b6 The workshop information page contains the links, resources and credentials necessary to complete the labs in this workshop. To get to this webpage: Go to the OpenShift console of your assigned cluster. Select the student001 project. In the navigation on the left, select Routes in the Operators section. Click on the icon next to the url for the workshop-info route. This will open the webpage in a new tab. Traderlite Application Installation \u00b6 The traderlite application used in this workshop is installed as part of the API Connect and/or the Salesforce integration labs. If you have not completed that lab, follow these steps to install an instance of the application. In a separate browser tab, go to the OpenShift console of your assigned cluster. Click on Projects in the left navigation and then click on the student001 project in the list. Click on Installed Operators in the left navigation and then click on the TraderLite Operator in the list. Click the Create Instance to start the installation of the TraderLite app. Name the instance traderlite and leave everything else with their default values. Click Create In the left navigation select Pods in the Workloads section and then wait for all the TraderLite pods to have a status of Running and be in the Ready state. Note: You can enter traderlite in the search by name input field to filter the pods. Accept Private Connection \u00b6 There are various components used in this workshop. When loading the UIs for these components you may receive a message in your browser that the connection is not private. To complete loading the UI: Click the Advanced button below the warning message and then click the Proceed to .... link. You may receive this message more than once, follow the same steps to proceed to the UI.","title":"Frequently asked questions"},{"location":"faq/#frequently-asked-questions-helpful-tips-tricks","text":"How do I get to the workshop information page? I don't have the trader lite application, how can I install it? I am receiving a Your connection is not private message, what should I do? Note: You can click on any image in the instructions below to zoom in and see more details. When you do that just click on your browser's back button to return to the previous state.","title":"Frequently Asked Questions &amp; Helpful Tips / Tricks"},{"location":"faq/#workshop-information-page","text":"The workshop information page contains the links, resources and credentials necessary to complete the labs in this workshop. To get to this webpage: Go to the OpenShift console of your assigned cluster. Select the student001 project. In the navigation on the left, select Routes in the Operators section. Click on the icon next to the url for the workshop-info route. This will open the webpage in a new tab.","title":"Workshop Information Page"},{"location":"faq/#traderlite-application-installation","text":"The traderlite application used in this workshop is installed as part of the API Connect and/or the Salesforce integration labs. If you have not completed that lab, follow these steps to install an instance of the application. In a separate browser tab, go to the OpenShift console of your assigned cluster. Click on Projects in the left navigation and then click on the student001 project in the list. Click on Installed Operators in the left navigation and then click on the TraderLite Operator in the list. Click the Create Instance to start the installation of the TraderLite app. Name the instance traderlite and leave everything else with their default values. Click Create In the left navigation select Pods in the Workloads section and then wait for all the TraderLite pods to have a status of Running and be in the Ready state. Note: You can enter traderlite in the search by name input field to filter the pods.","title":"Traderlite Application Installation"},{"location":"faq/#accept-private-connection","text":"There are various components used in this workshop. When loading the UIs for these components you may receive a message in your browser that the connection is not private. To complete loading the UI: Click the Advanced button below the warning message and then click the Proceed to .... link. You may receive this message more than once, follow the same steps to proceed to the UI.","title":"Accept Private Connection"},{"location":"instructor-guide/","text":"Instructor guide \u00b6 The content in this section is specifically made for instructors hosting this workshop.","title":"Instructor guide"},{"location":"instructor-guide/#instructor-guide","text":"The content in this section is specifically made for instructors hosting this workshop.","title":"Instructor guide"},{"location":"pre-work/","text":"Pre-work \u00b6 On IBM Cloud \u00b6 These requirements are for an IBM Cloud deployment on OpenShift 4.6 provisioned by the developer advocates from IBM Developer . Open https://cloud.ibm.com in a new browser tab. Select Clusters . Select the cluster that was assigned to you for the workshop. Click on OpenShift web console to launch the console. In the left navigation select Projects (in the Home section) and then select the student001 project. In the left navigation select Routes (in the Networking section) and then click on the Location link for the workshop-info route. The will launch your Workshop Info page. Keep this tab open for the rest of the workshop as it has all the information and links needed for you to complete the lab exercises.","title":"Setup access to the environment"},{"location":"pre-work/#pre-work","text":"","title":"Pre-work"},{"location":"pre-work/#on-ibm-cloud","text":"These requirements are for an IBM Cloud deployment on OpenShift 4.6 provisioned by the developer advocates from IBM Developer . Open https://cloud.ibm.com in a new browser tab. Select Clusters . Select the cluster that was assigned to you for the workshop. Click on OpenShift web console to launch the console. In the left navigation select Projects (in the Home section) and then select the student001 project. In the left navigation select Routes (in the Networking section) and then click on the Location link for the workshop-info route. The will launch your Workshop Info page. Keep this tab open for the rest of the workshop as it has all the information and links needed for you to complete the lab exercises.","title":"On IBM Cloud"}]}